diff --git a/third_party/blink/renderer/core/loader/image_loader.cc b/third_party/blink/renderer/core/loader/image_loader.cc
index a5f02639f9bbf10221fb5a34e1580613764787aa..1ae76f1e7b9cbdd890163e71611f3cb0449eeeaf 100644
--- a/third_party/blink/renderer/core/loader/image_loader.cc
+++ b/third_party/blink/renderer/core/loader/image_loader.cc
@@ -23,6 +23,7 @@
 #include "third_party/blink/renderer/core/loader/image_loader.h"
 
 #include <memory>
+#include <sstream>
 #include <utility>
 
 #include "third_party/blink/public/common/features.h"
@@ -69,6 +70,16 @@
 #include "third_party/blink/renderer/platform/weborigin/security_origin.h"
 #include "third_party/blink/renderer/platform/weborigin/security_policy.h"
 
+// #if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+
+#include "third_party/blink/renderer/core/loader/resource/image_resource.h"
+
+#include "brave/third_party/blink/brave_page_graph/types.h"
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#include "brave/third_party/blink/brave_page_graph/utilities/response_metadata.h"
+// #endif
+
 namespace blink {
 
 namespace {
@@ -572,7 +583,21 @@ void ImageLoader::DoUpdateFromElement(
       }
     }
 
-    new_image_content = ImageResourceContent::Fetch(params, document.Fetcher());
+// #if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+    new_image_content = ImageResourceContent::Fetch(params, document.Fetcher(), &inspector_id_);
+    {
+      ::brave_page_graph::PageGraph* page_graph = element_->GetDocument().GetPageGraph();
+      if (page_graph != nullptr) {
+        auto node_id = DOMNodeIds::IdForNode(element_);
+        page_graph->RegisterRequestStartFromElm(
+          node_id, inspector_id_, url,
+          ::brave_page_graph::RequestType::kRequestTypeImage);
+      }
+    }
+// #else
+//     new_image_content =
+//         ImageResourceContent::Fetch(params, document.Fetcher());
+// #endif
 
     // If this load is starting while navigating away, treat it as an auditing
     // keepalive request, and don't report its results back to the element.
@@ -816,6 +841,25 @@ void ImageLoader::ImageNotifyFinished(ImageResourceContent* resource) {
   if (html_image_element)
     LazyImageHelper::RecordMetricsOnLoadFinished(html_image_element);
 
+// #if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    ::brave_page_graph::PageGraph* page_graph = element_->GetDocument()
+        .GetPageGraph();
+    if (page_graph != nullptr) {
+      const ResourceResponse& rep = resource->GetResponse();
+      const ::brave_page_graph::ResponseMetadata metadata(rep);
+
+      if (resource->ErrorOccurred()) {
+        page_graph->RegisterRequestError(inspector_id_, metadata);
+      } else {
+        page_graph->RegisterRequestComplete(inspector_id_,
+            ResourceType::kImage, metadata,
+            ImageDigest(image_content_->GetImage()));
+      }
+    }
+  }
+// #endif
+
   if (resource->ErrorOccurred()) {
     pending_load_event_.Cancel();
 
@@ -892,8 +936,9 @@ void ImageLoader::DispatchPendingLoadEvent(
   if (!image_content_)
     return;
   CHECK(image_complete_);
-  if (GetElement()->GetDocument().GetFrame())
+  if (GetElement()->GetDocument().GetFrame()) {
     DispatchLoadEvent();
+  }
 
   // Checks Document's load event synchronously here for performance.
   // This is safe because DispatchPendingLoadEvent() is called asynchronously.
@@ -902,8 +947,9 @@ void ImageLoader::DispatchPendingLoadEvent(
 
 void ImageLoader::DispatchPendingErrorEvent(
     std::unique_ptr<IncrementLoadEventDelayCount> count) {
-  if (GetElement()->GetDocument().GetFrame())
+  if (GetElement()->GetDocument().GetFrame()) {
     GetElement()->DispatchEvent(*Event::Create(event_type_names::kError));
+  }
 
   // Checks Document's load event synchronously here for performance.
   // This is safe because DispatchPendingErrorEvent() is called asynchronously.
